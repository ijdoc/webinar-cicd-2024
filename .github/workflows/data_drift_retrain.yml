# Checks for drift between train & prod data, and
# retrains the model when drift is detected
name: Data Drift Check

on:
  # FIXME: We would typically run this every day, but since this is just an example
  # we will instead emulate executions by running POST requests directly from a script
  # schedule:
  #   - cron: '0 0 * * *'  # Run every day at midnight
  push: # run on push to debugging branch
    branches: e2e_mock  # Run on push to e2e_mock branch
  repository_dispatch:  # Allows webhook triggering
    types: [new_prod_data_batch]

jobs:
  drift_check:
    runs-on: ubuntu-latest
    outputs:  # Define outputs for downstream jobs
      drift_detected: ${{ steps.drift_check.outputs.drift_detected }}
    steps:
      - name: ‚è¨ Checkout repository
        uses: actions/checkout@v3

      - name: üêç Setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: üì¶ Install dependencies
        run: |
          pip install pipenv
          cd drift
          pipenv sync

      - name: ‚öôÔ∏è Run Drift Check
        env:
          WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
        id: drift_check
        run: |
          cd drift
          output=$(pipenv run python check_drift.py)
          echo "$output"
          drift_detected=$(echo "$output" | grep "::DRIFT_DETECTED::" | cut -d'::' -f3)
          echo "drift_detected=$drift_detected" >> $GITHUB_OUTPUT

  retrain:
    needs: drift_check
    if: ${{ needs.drift_check.outputs.drift_detected == 'True' }}
    runs-on: self-hosted
    steps:
      - name: ‚è¨ Checkout repository
        uses: actions/checkout@v3

      - name: ‚öôÔ∏è Train!
        env:
          WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
        run: |
          python train.py
